#!/usr/bin/env node

/**
 * This file is part of Cjdmaid.
 *
 * Cjdmaid program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* jshint camelcase: false */

"use strict";

var when = require("when");
var program = require("commander");

var util = require(__dirname + "/../lib/util");
var admin = require(__dirname + "/../lib/admin");
var commfn = require(__dirname + "/../lib/commander/function");
var config = require(__dirname + "/../lib/config");
var addingdata = require(__dirname + "/../lib/addingdata");
var configpath = require(__dirname + "/../lib/configpath");

program.option("-i, --interface <string>", "Interface to which add peer", "UDP").option("-I, --index <number>", "Interface index", parseInt, 0).option("-f, --force", "Immediately continue").option("-r, --rewrite", "Force peer rewrite").option("-a, --address <ip:port>", "Node's address").option("-p, --passwd <text>", "Node's password").option("-P, --publicKey <text>", "Node's publicKey").option("-6, --ipv6 <ip>", "Node's ipv6").option("-n, --name <text>", "Node author's name").option("-e, --email <email>", "Node author's email").option("-l, --location <text>", "Node's location").option("-b, --bare", "Just save to config, don't send via admin.");

program.on("--help", function() {
    console.log("  Examples:");
    console.log("");
    console.log("    $ cjdmaid-addpeer");
    console.log("    $ cjdmaid-addpeer --email someone@domain.org");
    console.log("    $ cjdmaid-addpeer " + "--interface UDP --index 1");
    console.log("    $ cjdmaid-addpeer " + "--password SfmsdfJQdfJDFnqExamplEnASFnfdisQm");
    console.log("");
});

program.parse(process.argv);

program.interface = program.interface.toUpperCase();

if (program.interface !== "UDP" && program.interface !== "ETH") {
    var err = new Error("Wrong interface. Acceptable values: UDP, ETH");
    return util.panic(err);
}

var configpath = ["interfaces", program.interface.toUpperCase() + "Interface", program.index, "connectTo"];

var adata = new addingdata({
    addingKeys: ["address", "password", "publicKey", "ipv6", "name", "email", "location"]
});

var adminCopy = new admin();
var session;

adata.setDataField("address", program.address);
adata.setDataField("password", program.passwd);
adata.setDataField("publicKey", program.publicKey);
adata.setDataField("ipv6", program.ipv6);
adata.setDataField("name", program.name);
adata.setDataField("email", program.email);
adata.setDataField("location", program.location);

when(
commfn.call(program.prompt, program, "Paste json data (new line on end):")).then(function(data) {
    // fix some common errors
    var trimData = data.trim();
    var stripComma = trimData.replace(/,$/, "");
    var fixCommas = stripComma.replace(/("|')$/mg, "$1,");
    var lastComma = fixCommas.replace(/("|')(.*?)("|'),\s*}/, "$1$2$3}");
    var addBrackets = "{" + lastComma + "}";
    var peerJson = {};

    try {
        peerJson = JSON.parse(addBrackets);
    } catch (e) {
        return util.panic(e);
    }

    var address = Object.keys(peerJson)[0];
    if (util.isDef(address)) {
        for (var key in peerJson[address]) {
            if (peerJson[address].hasOwnProperty(key)) {
                adata.setDataField(key, peerJson[address][key]);
            }
        }
        adata.addDataField("address", address);
    }

    return adata.promptMissingFields();
}).then(function() {
    if (program.force) {
        return when.resolve();
    } else {
        return adata.chooseAction();
    }
}).yield(
config.readCustomConf("cjdrouteConf")).then(function(doc) {

    var pushObject = util.cloneObject(adata.addingData);
    pushObject = util.deleteEmptyRows(pushObject);
    delete pushObject.address;

    var docIter = configpath.isPossible(configpath, doc, Object);
    if (!docIter) {
        var err = new Error("Config has wrong structure.");
        return util.panic(err);
    }

    var isPeerDefined = util.isDef(docIter.pointer[adata.addingData.address]);
    docIter.pointer[adata.addingData.address] = pushObject;

    if (!isPeerDefined) {
        return savePeer(doc);
    }

    if (program.rewrite) {
        console.log("Peer with that address exists. Rewriting.");
        return savePeer(doc);
    }

    return when(
    commfn.call(
    program.confirm, program, "Peer with that address exists. Continue? ")).then(function(ok) {
        if (!ok) {
            console.log("exiting...");
            return process.stdin.destroy();
        }
        return savePeer(doc);
    });
}).otherwise(function(err) {
    if (err) {
        return util.panic(err);
    }
});

function savePeer(doc) {
    return when(
    config.writeCustomConfSafe("cjdrouteConf", doc)).then(function() {
        console.log("Saved to config.");
        if (program.bare) {
            return;
        }

        return adminCopy.connectWithAdminInfo();
    }).then(function(sess) {
        if (program.bare) {
            return;
        }

        session = sess;
        return session[program.interface + "Interface_beginConnection"](
        adata.addingData.address, adata.addingData.publicKey, program.index, adata.addingData.password);
    }).then(function() {
        if (program.bare) {
            return;
        }

        console.log("Sended to cjdns.");
        return session.disconnect();
    }).then(function() {
        return process.stdin.destroy();
    });
}

