#!/usr/bin/env node

/**
 * This file is part of Cjdmaid.
 *
 * Cjdmaid program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* jshint camelcase: false */

"use strict";

var when = require("when");
var program = require("commander");

var util = require(__dirname + "/../lib/util");
var admin = require(__dirname + "/../lib/admin");
var config = require(__dirname + "/../lib/config");
var addingdata = require(__dirname + "/../lib/addingdata");

program.option("-I, --index <number>", "Interface index", parseInt, 0).option("-f, --force", "Immediately continue").option("-p, --passwd <text>", "Node's password").option("-n, --name <text>", "Node author's name").option("-e, --email <email>", "Node author's email").option("-l, --location <text>", "Node's location").option("-4, --ipv4 <ip>", "Node's ipv4").option("-6, --ipv6 <ip>", "Node's ipv6").option("-b, --bare", "Just save to config, don't send via admin.");

program.on("--help", function() {
    console.log("  Examples:");
    console.log("");
    console.log("    $ cjdmaid-addpass");
    console.log("    $ cjdmaid-addpass --email someone@domain.org");
    console.log("    $ cjdmaid-addpass " + "-n someone -e someone@domain.org -l 'Russia, Moscow'");
    console.log("    $ cjdmaid-addpass " + "--password SfmsdfJQdfJDFnqExamplEnASFnfdisQm");
    console.log("");
});

program.parse(process.argv);

var adata = new addingdata({
    addingKeys: ["password", "name", "email", "location", "ipv6", "ipv4"]
});

var adminCopy = new admin();
var session;

adata.setDataField("password", program.passwd);
adata.setDataField("name", program.name);
adata.setDataField("email", program.email);
adata.setDataField("location", program.location);
adata.setDataField("ipv4", program.ipv4);
adata.setDataField("ipv6", program.ipv6);

when(
config.readCustomConf("cjdmaidConf")).then(function(data) {
    if (!util.isDef(data.passwordLength)) {
        var err = new Error("\"passwordLength\" field " + "not found in your cjdmaid.conf");
        return util.panic(err);
    }
    return util.generatePassword(data.passwordLength);
}).then(function(password) {
    if (!util.isDef(adata.addingData.password)) {
        adata.setDataField("password", password);
    }
    return adata.promptMissingFields();
}).then(function() {
    if (program.force) {
        return when.resolve();
    } else {
        return adata.chooseAction();
    }
}).yield(
config.readCustomConf("cjdrouteConf")).then(function(doc) {
    if (!util.isDef(doc.authorizedPasswords)) {
        doc.authorizedPasswords = [];
    }

    var pushObject = util.cloneObject(adata.addingData);
    pushObject = util.deleteEmptyRows(pushObject);

    doc.authorizedPasswords.push(pushObject);
    return config.writeCustomConfSafe("cjdrouteConf", doc);
}).then(function() {
    console.log("Saved to config.");

    if (program.bare) {
        return;
    }

    return adminCopy.connectWithAdminInfo();
}).then(function(sess) {
    if (program.bare) {
        return;
    }

    session = sess;
    return session.AuthorizedPasswords_add(adata.addingData.password);
}).then(function() {
    if (program.bare) {
        return;
    }

    console.log("Sended to cjdns.");
    return session.disconnect();
}).then(function() {
    console.log("");
    console.log("Here's data that you need send to your friend: ");
    return config.readSeveralConfs("cjdmaidConf", "cjdrouteConf");
}).then(function(docs) {
    var cjdmaidConfJson = docs[0];
    var cjdrouteConfJson = docs[1];

    if (!util.isDef(cjdmaidConfJson.ownNodeData.ip)) {
        var err = new Error("\"ownNodeData\".\"ip\" field " + "not found in your cjdmaid.conf");
        return util.panic(err);
    }

    var resultObject = {};

    var port = cjdrouteConfJson.interfaces.UDPInterface[program.index].bind;
    port = port.split(":")[1];

    var address = cjdmaidConfJson.ownNodeData.ip + ":" + port;

    resultObject[address] = {
        "password": adata.addingData.password,
        "publicKey": cjdrouteConfJson.publicKey,
        "ipv6": cjdrouteConfJson.ipv6
    };

    for (var i in cjdmaidConfJson.ownNodeData) {
        if (cjdmaidConfJson.ownNodeData.hasOwnProperty(i)) {
            if (cjdmaidConfJson.ownNodeData[i]) {
                resultObject[address][i] = cjdmaidConfJson.ownNodeData[i];
            }
        }
    }

    var resultJson = JSON.stringify(resultObject, null, 4);
    resultJson = resultJson.replace(/^\s{4}/mg, "");
    resultJson = resultJson.substring(1, resultJson.length);
    resultJson = resultJson.substring(0, resultJson.length - 1);

    console.log(resultJson);
    return process.stdin.destroy();
}).otherwise(function(err) {
    if (err) {
        return util.panic(err);
    }
});

