#!/usr/bin/env node

/**
 * This file is part of Cjdmaid.
 *
 * Cjdmaid program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* jshint camelcase: false */

"use strict";

var when = require("when");
var program = require("commander");
var timeout = require("when/timeout");

var util = require(__dirname + "/../lib/util");
var admin = require(__dirname + "/../lib/admin");
var config = require(__dirname + "/../lib/config");

program.option("-s, --secs <number>", "Seconds to wait between fetches", parseInt, 30);

var adminCopy = new admin();
var session;
var programExit = when.defer();

program.parse(process.argv);

when(config.readJson(util.expanduser("~/.cjdnsadmin"))).then(function(data) {
    return adminCopy.connect(data.addr, data.port, data.password);
}).then(function(sess) {
    session = sess;
    findNodes();
    process.on("SIGINT", function() {
        programExit.reject();
    });
    return programExit.promise;
}).otherwise(function(err) {
    if (err) {
        return util.panic(err);
    }
}).ensure(function() {
    return session.disconnect();
});

var nodes = {};

function findNodes() {
    when(
    getNewNodes(0, [])).then(function(newNodes) {
        for (var i = 0; i < newNodes.length; i++) {
            console.log(newNodes[i]);
        }
        console.log(newNodes.length + " new nodes found");
        console.log("Waiting " + program.secs + " seconds.");
        return timeout(program.secs * 1000, programExit.promise);
    }).otherwise(function(err) {
        if (!err) {
            return when.reject(err);
        }
        if (err.message.substr(0, "timed out".length) === "timed out") {
            return;
        }
        return when.reject(err);
    }).then(function() {
        findNodes();
    }).otherwise(function(err) {
        if (err) {
            return util.panic(err);
        }
    });
}

function getNewNodes(index, newNodes) {
    return when(
    session.NodeStore_dumpTable(index)).then(function(data) {
        if (!data.routingTable) {
            console.log("got empty data");
            console.log(data);
            return [];
        }
        for (var i = 0; i < data.routingTable.length; i++) {
            var r = data.routingTable[i];
            if (!util.isDef(nodes[r.ip])) {
                nodes[r.ip] = 1;
                newNodes.push(r);
            }
        }
        if (!util.isDef(data.more)) {
            return newNodes;
        }
        return getNewNodes(index + 1, newNodes);
    });
}

