#!/usr/bin/env node

/**
 * This file is part of Cjdmaid.
 *
 * Cjdmaid program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/* jshint camelcase: false */

"use strict";

var when = require("when");
var program = require("commander");

var util = require(__dirname + "/../lib/util");
var admin = require(__dirname + "/../lib/admin");
var config = require(__dirname + "/../lib/config");
var addingdata = require(__dirname + "/../lib/addingdata");
var configpath = require(__dirname + "/../lib/configpath");

program.option("-f, --force", "Immediately continue").option("-P, --publicKey <text>", "Node's publicKey").option("-4, --ipv4 <ip>", "Node's ipv4").option("-6, --ipv6 <ip>", "Node's ipv6").option("-n, --name <text>", "Node author's name").option("-e, --email <email>", "Node author's email").option("-l, --location <text>", "Node's location").option("-b, --bare", "Just save to config, don't send via admin.");

program.on("--help", function() {
    console.log("  Examples:");
    console.log("");
    console.log("    $ cjdmaid allowcon");
    console.log("    $ cjdmaid-allowcon --email someone@domain.org");
    console.log("    $ cjdmaid-allowcon " + "-n someone -e someone@domain.org -l 'Russia, Moscow'");
    console.log("    $ cjdmaid-allowcon " + "--publicKey SfmsdfJQdfJDFnqExamplEnASFnfdisQm");
    console.log("");
});

program.parse(process.argv);

var configpath = ["router", "ipTunnel", "allowedConnections"];

var adata = new addingdata({
    addingKeys: ["publicKey", "ip4Address", "ip6Address", "name", "email", "location"]
});

var adminCopy = new admin();
var session;

adata.setDataField("publicKey", program.publicKey);
adata.setDataField("ip4Address", program.ipv4);
adata.setDataField("ip6Address", program.ipv6);
adata.setDataField("name", program.name);
adata.setDataField("email", program.email);
adata.setDataField("location", program.location);

when(
adata.promptMissingFields()).then(function() {

    if (program.force) {
        return when.resolve();
    } else {
        return adata.chooseAction();
    }

}).yield(
config.readCustomConf("cjdrouteConf")).then(function(doc) {
    var pushObject = util.cloneObject(adata.addingData);
    pushObject = util.deleteEmptyRows(pushObject);

    var docIter = configpath.isPossible(configpath, doc, Array);
    if (!docIter) {
        var err = new Error("Config has wrong structure.");
        return util.panic(err);
    }

    docIter.pointer.push(pushObject);

    return config.writeCustomConfSafe("cjdrouteConf", doc);
}).then(function() {
    console.log("Saved to config!");

    if (program.bare) {
        return;
    }

    return adminCopy.connectWithAdminInfo();
}).then(function(sess) {
    if (program.bare) {
        return;
    }

    session = sess;
    return session.IpTunnel_allowConnection(
    adata.addingData.publicKey, adata.addingData.ipv4, adata.addingData.ipv6);
}).then(function() {
    if (program.bare) {
        return;
    }

    console.log("Sended to cjdns.");
    return session.disconnect();
}).then(function() {
    return process.stdin.destroy();
}).otherwise(function(err) {
    if (err) {
        return util.panic(err);
    }
});

